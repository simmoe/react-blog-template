{"version":3,"sources":["components/firebase.js","components/Header.js","components/Project.js","components/Projects.js","components/Contact.js","components/Login.js","components/Edit.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Header","props","to","process","signedIn","Project","className","project","defaultImage","src","alt","title","year","parse","description","id","onClick","window","confirm","firestore","collection","doc","delete","Projects","useState","projects","setProjects","useEffect","orderBy","onSnapshot","snapshot","docs","add","timestamp","FieldValue","serverTimestamp","then","ref","console","log","catch","error","length","breakpointCols","default","1400","1000","columnClassName","map","key","data","Contact","href","Login","localStorage","getItem","provider","auth","GoogleAuthProvider","addScope","signInWithPopup","setItem","currentUser","displayName","signOut","photoURL","Edit","setProject","status","setStatus","scrollTo","updateValue","e","persist","prevProject","target","name","value","onSubmit","preventDefault","update","err","message","onChange","placeholder","hidden","accept","randomizeFilename","storageRef","storage","onUploadStart","onUploadError","onUploadSuccess","filename","child","getDownloadURL","url","type","App","setSignedIn","onAuthStateChanged","user","removeItem","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.44ef0da1.chunk.js","sourcesContent":["import firebase from 'firebase'\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyC5ize_t5L01W_Q3TZmmxTfye1Z9rOSp0E\",\n    authDomain: \"web-firestore-authentication.firebaseapp.com\",\n    databaseURL: \"https://web-firestore-authentication.firebaseio.com\",\n    projectId: \"web-firestore-authentication\",\n    storageBucket: \"web-firestore-authentication.appspot.com\",\n    messagingSenderId: \"954309262588\",\n    appId: \"1:954309262588:web:c7d23d1466067040a0ab79\",\n    measurementId: \"G-TY9H31DPG5\"\n}\n// Initialize Firebase, firestore and authentication\nfirebase.initializeApp(firebaseConfig)\n\nexport default firebase","// HEADER\n\nimport React from 'react'\nimport './Header.css'\nimport {Link} from '@reach/router'\n\nconst Header = (props) => {\n    return (\n        <header>\n            <Link to={process.env.PUBLIC_URL + '/'}>projects</Link>\n            <Link to={process.env.PUBLIC_URL + '/contact'}>contact</Link>\n            <Link to={process.env.PUBLIC_URL + '/login'}>{\n                props.signedIn \n                ? 'profile' \n                : 'login'\n                }\n            </Link> \n        </header>\n    )\n}\n\nexport default Header","// PROJECT JS\nimport React from 'react'\nimport firebase from './firebase'\nimport { Link } from \"@reach/router\"\nimport {FaCode} from 'react-icons/fa'\nimport {MdDelete} from 'react-icons/md'\nimport './Project.css'\nimport parse from 'html-react-parser'\n\nconst Project = (props) => {\n    const deleteProject = () => {\n        if(window.confirm('sure?')){\n            firebase.firestore().collection('projects').doc(props.id).delete()\n        }\n    }\n    return (\n        <div className=\"project\">\n            {props.project.defaultImage && <img src={props.project.defaultImage} alt='hei' />}\n            <h1>{props.project.title}</h1>\n            <div>{props.project.year}</div>\n            <div>{parse(props.project.description)}</div>\n            {props.signedIn && \n            <div className='admin'>\n                <Link to={process.env.PUBLIC_URL + '/edit/' + props.id} className='edit-icons'>\n                    <FaCode className='edit-icon' />\n                </Link>\n                <MdDelete onClick={deleteProject} className='edit-icon' />\n            </div>\n            }\n        </div>\n    )\n} \nexport default Project\n","// HOME JS\n\nimport React, {useState, useEffect} from 'react'\nimport firebase from './firebase'\nimport Project from './Project'\nimport {IoIosAddCircle} from 'react-icons/io'\nimport Masonry from 'react-masonry-css' \n\nconst Projects = (props) => {\n    const [projects, setProjects] = useState([])\n\n    useEffect(() => {\n        firebase\n            .firestore()\n            .collection('projects')\n            .orderBy('year', 'desc')\n            .onSnapshot(snapshot => \n                setProjects(snapshot.docs)\n            )\n    }, [])\n\n    const addProject = () => {\n        firebase.firestore().collection('projects').add({\n            title: 'new project',\n            year:2020,\n            description: '',\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\n        }).then(ref => {\n            console.log('Added document with ID: ', ref.id)\n        }).catch( error => console.log(error))\n    } \n\n    return (\n        <main className='home'>\n        {\n            props.signedIn &&\n            <div className='admin-actions' onClick={addProject}>\n                <IoIosAddCircle className='edit-icon' />\n            </div>\n        }\n\n        {\n        projects.length > 0 \n        ? \n        <Masonry\n            breakpointCols={{\n                default: 3,\n                1400: 2,\n                1000: 1\n              }}\n            className=\"my-masonry-grid\"\n            columnClassName=\"my-masonry-grid_column\">\n                {\n                    projects.map(\n                        doc => \n                        <Project key={doc.id} id={doc.id} project={doc.data()} signedIn={props.signedIn}/>\n                    )\n                }\n        </Masonry>\n        :\n            <p>Getting projects, hold on...</p>\n        }\n        </main>\n    )\n}\n\nexport default Projects\n","import React from 'react'\n\nconst Contact = (props) => {\n    return(\n        <main>\n            <div className='contact-info'>\n                <h1>Contact me</h1>\n                <p>Simon Moe</p>\n                <p>+45 6556 9898</p>\n                <a \n                href='mailto:simmoe@gmail.com'>\n                simmoe@gmail.com\n                </a>\n            </div>\n        </main>\n    )\n}\n\nexport default Contact","// LOGIN JS\n\nimport React from 'react'\nimport firebase from './firebase'\n\nconst Login = (props) => {\n\n    const loginWithGoogle = () => {\n\n        //make sure you've added google as sign in method in your firebase console\n        let provider = new firebase.auth.GoogleAuthProvider()\n        provider.addScope('profile')\n        provider.addScope('email')\n\n        firebase.auth().signInWithPopup(provider)\n            .catch(function (error) {\n                console.log(error)\n            })\n        //set a local storage variable to indicate that login is pending\n        localStorage.setItem(\"Logging in\", true)\n    }\n\n    return (\n      <main className=\"login\">\n        {!props.signedIn && (\n            <>\n                {!localStorage.getItem(\"Logging in\") && <button onClick={loginWithGoogle}>use google to sign in</button>}\n                {localStorage.getItem(\"Logging in\") && <p>Log in progress, hold on...</p>}\n            </>\n        )}\n        {props.signedIn && (\n            <div>\n            <h1>You are logged in to firebase</h1>\n            <p>Welcome {firebase.auth().currentUser.displayName}. You are now signed-in.</p>\n            <button onClick={() => {firebase.auth().signOut(); }}>Sign-out</button>        \n            {firebase.auth().currentUser.photoURL && <img src={firebase.auth().currentUser.photoURL} alt='profile' />}\n            </div>\n        )}\n    </main>\n    )\n}\n\nexport default Login\n","import React, {useEffect, useState} from 'react'\nimport firebase from './firebase'\nimport FileUploader from 'react-firebase-file-uploader'\n\n\nconst Edit = (props) => {\n\n    const [project, setProject] = useState() \n    const [status, setStatus] = useState('')\n\n    useEffect( () => {\n        window.scrollTo(0, 0)       \n        firebase.firestore().collection('projects').doc(props.id)\n            .onSnapshot(snapshot => {\n            setProject(snapshot.data())\n        })\n    }, [props.id])\n\n    const updateValue =  \n    //e.persist makes the element visible in the callback function\n    //the spread object syntax is JSX - makes the given value of post stay, while we update this value\n        e => {\n        e.persist()\n        setProject(prevProject => ({\n            ...prevProject,\n            [e.target.name]: e.target.value\n        }))\n    }\n\n    const saveProject = (e) => {\n        e.preventDefault() //abort reloading the page\n        setStatus('updating, please hold...')\n        firebase.firestore().collection('projects').doc(props.id).update(project)\n        .then(()=>{setStatus(\"project updated\")})\n        .catch(err => {\n            setStatus(\"Error saving project: \" + err.message)\n        })\n    }\n\n    const handleUploadStart = () => {setStatus('uploading image, please hold')}\n    const handleUploadError = (error) => {setStatus(error.message)}\n    const handleUploadSuccess = filename => {\n        firebase\n          .storage()\n          .ref(\"images\")\n          .child(filename)\n          .getDownloadURL()\n          .then(\n              url => setProject( prevProject => (\n            {\n                ...prevProject,\n                 defaultImage: url \n            }\n          ) ) )\n          setStatus('image ready')\n    }\n\n    return(\n        <main className='edit'>\n        <h1>Edit project</h1>\n        <p>Project id: {props.id}</p>\n        {\n            project && \n            <>\n            <form onSubmit={saveProject}>\n                <input name='title' onChange={updateValue} value={project.title} />\n                <input name='year' onChange={updateValue} placeholder='year' value={project.year} />\n                <textarea name='description' placeholder='description' onChange={updateValue} value={project.description} />\n                {project.defaultImage && <img alt='post img' src={project.defaultImage} />}\n                <label>\n                <div className='add'>{project.defaultImage ? 'new image' : 'add image'}</div>\n                <FileUploader\n                    hidden\n                    accept=\"image/*\"\n                    name=\"picture\"\n                    randomizeFilename\n                    storageRef={firebase.storage().ref(\"images\")}\n                    onUploadStart={handleUploadStart}\n                    onUploadError={handleUploadError}\n                    onUploadSuccess={handleUploadSuccess}\n                />\n                </label>\n\n                <button type='submit'>save</button>\n            </form>\n            <p>{status}</p>\n            </>\n        }\n        </main>\n    )\n}\n\n\nexport default Edit\n\n","import React, {useState, useEffect} from 'react'\nimport './App.css'\nimport firebase from './components/firebase'\nimport { Router } from \"@reach/router\"\nimport Header from \"./components/Header\"\nimport Projects from \"./components/Projects\"\nimport Contact from \"./components/Contact\"\nimport Login from \"./components/Login\"\nimport Edit from \"./components/Edit\"\n\nconst App = () => {\n    const [signedIn, setSignedIn] = useState(false)\n    useEffect( ()=> {\n        firebase.auth().onAuthStateChanged(\n            user => {\n                if(user){\n                    setSignedIn(true)\n                    //remove local storage variable\n                    localStorage.removeItem(\"Logging in\")\n                }else{\n                    setSignedIn(false)\n                    console.log('not signed in')\n                }\n            }\n        )\n    })\n\n    return (\n        <div>\n            <Header signedIn={signedIn} />            \n            <Router>\n                <Projects path={process.env.PUBLIC_URL + '/'} signedIn={signedIn} />\n                <Contact path={process.env.PUBLIC_URL + '/contact'} signedIn={signedIn} />\n                <Login path={process.env.PUBLIC_URL + '/login'} signedIn={signedIn} />\n                <Edit path={process.env.PUBLIC_URL + '/edit/:id'} />\n            </Router>\n        </div>\n    )\n} \n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}